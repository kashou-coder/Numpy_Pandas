### Тема “Вычисления с помощью Numpy”

### Задание 1
Импортируйте библиотеку Numpy и дайте ей псевдоним np.
Создайте массив Numpy под названием a размером 5x2, то есть состоящий из 5 строк и 2 столбцов. Первый столбец должен содержать числа 1, 2, 3, 3, 1, а второй - числа 6, 8, 11, 10, 7. Будем считать, что каждый столбец - это признак, а строка - наблюдение. Затем найдите среднее значение по каждому признаку, используя метод mean массива Numpy. Результат запишите в массив mean_a, в нем должно быть 2 элемента.

import numpy as np

a = np.array([[1, 6],
             [2, 8],
             [3, 11],
             [3, 10],
             [1, 7]])
a

mean_a = a.mean(axis=0, dtype="int")
mean_a

### Задание 2
Вычислите массив a_centered, отняв от значений массива “а” средние значения соответствующих признаков, содержащиеся в массиве mean_a. Вычисление должно производиться в одно действие. Получившийся массив должен иметь размер 5x2.

a_centered = a - mean_a
a_centered

### Задание 3
Найдите скалярное произведение столбцов массива a_centered. В результате должна получиться величина a_centered_sp. Затем поделите a_centered_sp на N-1, где N - число наблюдений.



### Тема “Работа с данными в Pandas”

### Задание 1
   Импортируйте библиотеку Pandas и дайте ей псевдоним pd. Создайте датафрейм authors со столбцами author_id и author_name, в которых соответственно содержатся данные: [1, 2, 3] и ['Тургенев', 'Чехов', 'Островский'].

   Затем создайте датафрейм book cо столбцами author_id, book_title и price, в которых соответственно содержатся данные: 
[1, 1, 1, 2, 2, 3, 3], 
['Отцы и дети', 'Рудин', 'Дворянское гнездо', 'Толстый и тонкий', 'Дама с собачкой', 'Гроза', 'Таланты и поклонники'],
[450, 300, 350, 500, 450, 370, 290].

import pandas as pd

authors = pd.DataFrame({"author_id": [1, 2, 3], "author_name": ["Тургенев", "Чехов", "Островский"]})
authors

book = pd.DataFrame({'author_id': [1, 1, 1, 2, 2, 3, 3], "book": ["Отцы и дети", "Рудин", "Дворянское гнездо", "Толстый и тонкий", "Дама с собачкой", "Гроза", "Таланты и поклонники"], "price": [450, 300, 350, 500, 450, 370, 290]})
book

### Задание 2
Получите датафрейм authors_price, соединив датафреймы authors и books по полю author_id.

authors_price = pd.merge(authors, book, on="author_id", how="inner")
authors_price

book.price[3]

book.iloc[:2, 1] 

book.iloc[0:3, 1]

book.iloc[[0, 1, 2], 1]

book.iloc[-2:, 1]

book.loc[:3, 'book']

book.loc[:, ["book", "title"]]

book.set_index("author_id")

book.price >= 430

book.loc[book.author_id > 1]

book.loc[book.book.isin(["Рудин", "Гроза"])]

book.price.describe() # вывод сводных статистических данных по столбцу с числовыми значениями

book.title.count() # отдельное выведение значения количество из статистического метода describe()

book.book.unique() # выводит уникальные данные строкового столбца

book.book.value_counts() #считает количество никальных значений в строком столбце

book_mean = book.price.mean() # 1 присвоили переменной значение средней
book_mean

book.price.map(lambda p: p - book_mean) # 2 при помощи команды map нашли на сколько выше/ниже от средней цены книги

#### Создадим функцию подобную выводу сделанному выше и объединим результаты с таблицей

# 1
def BookTitle(row):
    row.price = row.price - book_mean
    return row

 # 2
book.apply(BookTitle, axis="columns")

book.title - book_mean   # Еще один быстрый способ сделать вычитание,сделанное выше

concater = book.book + " - " + authors.author_name
concater

### Задание 3
Создайте датафрейм top5, в котором содержатся строки из authors_price с пятью самыми дорогими книгами.

top5 = authors_price.nlargest(5, "price")
top5



### Задание 4
Создайте датафрейм authors_stat на основе информации из authors_price. В датафрейме authors_stat должны быть четыре столбца:
author_name, min_price, max_price и mean_price,
в которых должны содержаться соответственно имя автора,минимальная, максимальная и средняя цена на книги этого автора.

a = pd.DataFrame({"max_price": [450, 300, 350, 500, 450, 370, 290], "min_price": [450, 300, 350, 500, 450, 370, 290], "mean_price": [450, 300, 350, 500, 450, 370, 290]})
a

b = pd.concat([authors_price, a], axis=1, ignore_index=False)
b

groupby = b.groupby('author_name')
groupby.agg({"max_price": "max", "min_price": "min", "mean_price": "mean"})
